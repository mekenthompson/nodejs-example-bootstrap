# .buildkite/bootstrap.yml

steps:
  #───────────────────────────────────────────────────────────────────────────────
  # 1. Prompt for infra config
  #───────────────────────────────────────────────────────────────────────────────
  - block: ":rocket: Deploy Buildkite infrastructure"
    fields:
      - text: "Buildkite org slug"                     # prompt text
        key: org_slug                                  # metadata key
        required: true
        default: "bootstrap-example"
        hint: "Find it in your URL: buildkite.com/<org-slug>"
      - text: "Registry name"
        key: registry
        required: true
        default: "bootstrap-example"
        hint: "Must be unique"
      - select: "Hosted agent shape"
        key: shape
        required: true
        default: "LINUX_AMD64_2X4"
        options:
          - label: "2 vCPU / 4 GB Linux"
            value: "LINUX_AMD64_2X4"
          - label: "4 vCPU / 16 GB Linux"
            value: "LINUX_AMD64_4X16"
          - label: "macOS M1 4 vCPU / 12 GB"
            value: "MACOS_M1_4X12"
      - text: "Buildkite API token"
        key: bk_token
        required: true
        hint: "Scopes: write_pipelines, read_pipelines, write_orgs, write_clusters, write_suites"

  #───────────────────────────────────────────────────────────────────────────────
  # 2. Debug - Check permissions and mounts
  #───────────────────────────────────────────────────────────────────────────────
  - label: ":bug: Debug - Check permissions and mounts"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          workdir: "/workdir"
          mount_buildkite_agent: true
          entrypoint: ""   # disable terraform's default entrypoint
          shell: [ "sh", "-eo", "pipefail", "-c" ]
          command:
            - echo "=== Checking provider permissions ==="
            - ls -lR .terraform/providers/registry.terraform.io/buildkite/buildkite
            - echo "=== Checking mounts ==="
            - mount | grep workdir
            - echo "=== Checking current directory permissions ==="
            - ls -ld /workdir
            - echo "=== Checking provider binary permissions ==="
            - if [ -f ".terraform/providers/registry.terraform.io/buildkite/buildkite/1.20.0/linux_amd64/terraform-provider-buildkite_v1.20.0" ]; then
            - ls -l ".terraform/providers/registry.terraform.io/buildkite/buildkite/1.20.0/linux_amd64/terraform-provider-buildkite_v1.20.0"
            - else
            - echo "Provider binary not found"
            - fi

  #───────────────────────────────────────────────────────────────────────────────
  # 2. Terraform — Init & Plan
  #───────────────────────────────────────────────────────────────────────────────
  - label: ":terraform: Initialize & Plan"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          # mount repo at /workdir (repo root)
          workdir: "/workdir"
          mount_buildkite_agent: true
          entrypoint: ""   # disable terraform's default entrypoint
          shell: [ "sh", "-eo", "pipefail", "-c" ]
          env:
            TF_VAR_org_slug:            "${BUILDKITE_META_ORG_SLUG}"
            TF_VAR_registry_name:       "${BUILDKITE_META_REGISTRY}"
            TF_VAR_queue_shape:         "${BUILDKITE_META_SHAPE}"
            TF_VAR_buildkite_api_token: "${BUILDKITE_META_BK_TOKEN}"
            TF_DATA_DIR:                "/tmp/terraform_data"
          command:
            - cd terraform
            - export TF_VAR_org_slug="$(buildkite-agent meta-data get org_slug)"
            - export TF_VAR_registry_name="$(buildkite-agent meta-data get registry)"
            - export TF_VAR_queue_shape="$(buildkite-agent meta-data get shape)"
            - export TF_VAR_buildkite_api_token="$(buildkite-agent meta-data get bk_token)"
            - mkdir -p "$TF_DATA_DIR"
            - mkdir -p artifacts
            - echo "--- :terraform: Initializing Terraform"
            - terraform init -input=false -upgrade
            - echo "--- :terraform: Planning infra changes"
            - terraform plan -input=false -out=artifacts/terraform.tfplan
            - echo "--- :mag: Showing planned changes"
            - terraform show -no-color artifacts/terraform.tfplan
    artifact_paths:
      - "terraform/artifacts/terraform.tfplan"

  #───────────────────────────────────────────────────────────────────────────────
  # 3. Pause for manual approval
  #───────────────────────────────────────────────────────────────────────────────
  - wait
  - block: ":white_check_mark: Apply infrastructure changes?"

  #───────────────────────────────────────────────────────────────────────────────
  # 4. Terraform — Apply
  #───────────────────────────────────────────────────────────────────────────────
  - label: ":terraform: Apply"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          # mount repo at /workdir (repo root)
          workdir: "/workdir"
          mount_buildkite_agent: true
          entrypoint: ""   # disable terraform's default entrypoint
          shell: [ "sh", "-eo", "pipefail", "-c" ]
          env:
            TF_VAR_org_slug:            "${BUILDKITE_META_ORG_SLUG}"
            TF_VAR_registry_name:       "${BUILDKITE_META_REGISTRY}"
            TF_VAR_queue_shape:         "${BUILDKITE_META_SHAPE}"
            TF_VAR_buildkite_api_token: "${BUILDKITE_META_BK_TOKEN}"
            TF_DATA_DIR:                "/tmp/terraform_data"
          command:
            - cd terraform
            - export TF_VAR_org_slug="$(buildkite-agent meta-data get org_slug)"
            - export TF_VAR_registry_name="$(buildkite-agent meta-data get registry)"
            - export TF_VAR_queue_shape="$(buildkite-agent meta-data get shape)"
            - export TF_VAR_buildkite_api_token="$(buildkite-agent meta-data get bk_token)"
            - mkdir -p "$TF_DATA_DIR"
            - mkdir -p artifacts
            - echo "--- :terraform: Initializing Terraform"
            - terraform init -input=false
            - echo "--- :terraform: Applying infra changes"
            - terraform apply -input=false -auto-approve artifacts/terraform.tfplan
            - echo "--- :floppy_disk: Saving outputs"
            - terraform output -json > artifacts/terraform-outputs.json
            - echo "--- :information_source: Exporting meta-data"
            - buildkite-agent meta-data set QUEUE_KEY default
            - buildkite-agent meta-data set REGISTRY_SLUG "${TF_VAR_registry_name}"
    artifact_paths:
      - "terraform/artifacts/terraform-outputs.json"

  #───────────────────────────────────────────────────────────────────────────────
  # 5. Verify nodejs-example pipeline exists
  #───────────────────────────────────────────────────────────────────────────────
  - label: ":mag: Verify nodejs-example pipeline"
    command:
      - |
        echo "--- :mag: Checking pipeline existence"
        ORG_SLUG=$(buildkite-agent meta-data get org_slug)
        BK_TOKEN=$(buildkite-agent meta-data get bk_token)
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${BK_TOKEN}" "https://api.buildkite.com/v2/organizations/${ORG_SLUG}/pipelines/nodejs-example")
        if [ "$STATUS" != "200" ]; then
          echo "Pipeline nodejs-example not found (HTTP $STATUS). Terraform may have failed."
          buildkite-agent annotate --style "error" "nodejs-example pipeline not found. Check Terraform apply logs or API token scopes." --context "pipeline-check"
          exit 1
        fi
        echo "Pipeline exists."

  #───────────────────────────────────────────────────────────────────────────────
  # 6. Trigger the nodejs-example pipeline
  #───────────────────────────────────────────────────────────────────────────────
  - label: ":tada: Trigger nodejs-example pipeline"
    command:
      - |
        echo "--- :rocket: Triggering nodejs-example"
        ORG_SLUG=$(buildkite-agent meta-data get org_slug)
        REGISTRY=$(buildkite-agent meta-data get registry)

        buildkite-agent pipeline upload <<PIPELINE
        steps:
          - trigger: "nodejs-example"
            async: true
            build:
              message: "First build after bootstrap :rocket:"
              env:
                QUEUE_KEY: "default"
                REGISTRY: "$REGISTRY"
        PIPELINE

  #───────────────────────────────────────────────────────────────────────────────
  # 6. Cleanup
  #───────────────────────────────────────────────────────────────────────────────
  - wait
  - label: ":broom: Cleanup"
    command:
      - |
        echo "--- :broom: Cleaning up artifacts"
        rm -rf artifacts/
        echo "--- :white_check_mark: Bootstrap complete!"
