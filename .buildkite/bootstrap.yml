# .buildkite/bootstrap.yml

steps:
  # 1. Interactive form
  - block: ":rocket: Deploy Buildkite infrastructure?"
    fields:
      - text: "Buildkite org slug"
        key: "org_slug"
        required: true
        default: "bootstrap-example"
        hint: "Find it in your URL: buildkite.com/<org-slug>"
      - text: "Registry name"
        key: "registry"
        required: true
        default: "bootstrap-example"
        hint: "Must be unique across your org"
      - select: "Hosted agent shape"
        key: "shape"
        required: true
        default: "LINUX_AMD64_2X4"
        options:
          - label: "Linux AMD64 2x4"
            value: "LINUX_AMD64_2X4"
          - label: "Linux AMD64 4x16"
            value: "LINUX_AMD64_4X16"
          - label: "macOS M1 4x12"
            value: "MACOS_M1_4X12"
      - text: "Buildkite API token"
        key: "bk_token"
        required: true
        hint: "Needs write_pipelines, write_organizations, etc."

  # 2. Terraform init & plan
  - label: ":terraform: Initialize & Plan"
    key: "terraform-plan"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          workdir: /workdir
          entrypoint: ["/bin/sh", "-c"]
    artifact_paths:
      - "artifacts/terraform.tfplan"
    commands:
      - |
        set -euo pipefail
        mkdir -p artifacts
        echo "--- Host checkout path: $BUILDKITE_BUILD_CHECKOUT_PATH"
        ls -al /workdir
        apk add --no-cache curl jq
        export TF_VAR_org_slug="$(buildkite-agent meta-data get org_slug)"
        export TF_VAR_registry_name="$(buildkite-agent meta-data get registry)"
        export TF_VAR_queue_shape="$(buildkite-agent meta-data get shape)"
        export TF_VAR_buildkite_api_token="$(buildkite-agent meta-data get bk_token)"
        terraform -chdir=terraform init -input=false
        terraform -chdir=terraform plan -input=false -out=/workdir/artifacts/terraform.tfplan
        terraform -chdir=terraform show -no-color /workdir/artifacts/terraform.tfplan

  - wait

  # 3. Manual approval
  - block: ":rocket: Apply infrastructure changes?"
    key: "apply-block"
    depends_on: "terraform-plan"

  # 4. Terraform apply
  - label: ":terraform: Apply"
    key: "terraform-apply"
    depends_on: "apply-block"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          workdir: /workdir
          entrypoint: ["/bin/sh", "-c"]
    artifact_paths:
      - "artifacts/terraform-outputs.json"
    commands:
      - |
        set -euo pipefail
        buildkite-agent artifact download "artifacts/terraform.tfplan" .
        mkdir -p artifacts
        echo "--- Host checkout path: $BUILDKITE_BUILD_CHECKOUT_PATH"
        ls -al /workdir
        apk add --no-cache curl jq
        export TF_VAR_org_slug="$(buildkite-agent meta-data get org_slug)"
        export TF_VAR_registry_name="$(buildkite-agent meta-data get registry)"
        export TF_VAR_queue_shape="$(buildkite-agent meta-data get shape)"
        export TF_VAR_buildkite_api_token="$(buildkite-agent meta-data get bk_token)"
        terraform -chdir=terraform init -input=false
        terraform -chdir=terraform apply -input=false -auto-approve /workdir/artifacts/terraform.tfplan
        terraform -chdir=terraform output -json > /workdir/artifacts/terraform-outputs.json

  - wait

  # 5. Trigger example pipeline
  - label: ":tada: Trigger nodejs-example pipeline"
    key: "trigger-pipeline"
    depends_on: "terraform-apply"
    commands:
      - |
        ORG=$(buildkite-agent meta-data get org_slug)
        cat <<YAML | buildkite-agent pipeline upload
        steps:
          - trigger: "nodejs-example"
            label: ":nodejs: First build"
            async: true
            build:
              message: "First build after bootstrap :rocket:"
              branch: "main"
        YAML
        echo "Visit https://buildkite.com/${ORG}/nodejs-example"

  - wait: ~
    continue_on_failure: true

  # 6. Cleanup
  - label: ":broom: Cleanup"
    key: "cleanup"
    commands:
      - rm -rf artifacts
      - echo "Bootstrap complete!"
