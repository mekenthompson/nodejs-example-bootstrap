steps:
  # ────────────────────────────────────────────────────────────────
  # 1. Interactive form – captures org slug, registry name,
  #    hosted‑agent shape, and an org‑level API token
  # ────────────────────────────────────────────────────────────────
  - block: ":gear:  Configure your Buildkite org"
    prompt: |
      **What happens next?**
      1. We’ll create a hosted‑agent queue in your Buildkite org  
      2. We’ll create a Package Registry and an example pipeline  
      3. Terraform will run *plan* → manual approval → *apply*

      *Fill in the details below, then click **Unblock** to continue.*
    fields:
      - text: "org_slug"
        label: "Buildkite organisation slug"
        required: true
      - text: "registry"
        label: "Package Registry name"
        default: "acme-internal"
        required: true
      - select: "shape"
        key: "shape"
        label: "Hosted‑agent instance shape"
        options:
          - label: "2 vCPU / 4 GB Linux (LINUX_AMD64_2X4)"
            value: "LINUX_AMD64_2X4"
          - label: "4 vCPU / 8 GB Linux (LINUX_AMD64_4X8)"
            value: "LINUX_AMD64_4X8"
          - label: "Apple M2 Pro 32 GB macOS (MAC_M2PRO_32GB)"
            value: "MAC_M2PRO_32GB"
      - password: "bk_token"
        label: "Buildkite **org‑level** API token (write scope)"
        required: true
        hint: "Generate at https://buildkite.com/user/api-access-tokens"
        secure: true

  # ────────────────────────────────────────────────────────────────
  # 2. terraform init & plan  (inside Docker, entry‑point cleared)
  # ────────────────────────────────────────────────────────────────
  - label: ":terraform: init & plan"
    key: plan
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          entrypoint: ""          # <‑‑ critical: override image ENTRYPOINT
          workdir: /workdir       # repo root inside the container
    commands:
      - |
        set -euo pipefail
        # Ensure curl exists (needed for GraphQL provisioners)
        if ! command -v curl >/dev/null 2>&1 ; then
          if command -v apk >/dev/null 2>&1 ; then
            apk add --no-cache curl
          elif command -v apt-get >/dev/null 2>&1 ; then
            apt-get update -qq && apt-get install -y -qq curl
          else
            echo "curl not found and package manager unknown" >&2
            exit 1
          fi
        fi

        # Pass the form values through to Terraform
        export TF_VAR_org_slug="$(buildkite-agent meta-data get org_slug)"
        export TF_VAR_registry_name="$(buildkite-agent meta-data get registry)"
        export TF_VAR_queue_shape="$(buildkite-agent meta-data get shape)"
        export TF_VAR_buildkite_api_token="$(buildkite-agent meta-data get bk_token)"

        cd terraform
        terraform init -input=false
        terraform plan -out=tf.plan
    agents:
      queue: "default"

  - wait

  # ────────────────────────────────────────────────────────────────
  # 3. Manual approval gate
  # ────────────────────────────────────────────────────────────────
  - block: ":white_check_mark:  Apply the plan?"

  # ────────────────────────────────────────────────────────────────
  # 4. terraform apply  (same container settings)
  # ────────────────────────────────────────────────────────────────
  - label: ":rocket: terraform apply"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          entrypoint: ""
          workdir: /workdir
    commands:
      - |
        set -euo pipefail
        # curl check again (container is fresh each step)
        if ! command -v curl >/dev/null 2>&1 ; then
          if command -v apk >/dev/null 2>&1 ; then
            apk add --no-cache curl
          elif command -v apt-get >/dev/null 2>&1 ; then
            apt-get update -qq && apt-get install -y -qq curl
          fi
        fi

        export TF_VAR_org_slug="$(buildkite-agent meta-data get org_slug)"
        export TF_VAR_registry_name="$(buildkite-agent meta-data get registry)"
        export TF_VAR_queue_shape="$(buildkite-agent meta-data get shape)"
        export TF_VAR_buildkite_api_token="$(buildkite-agent meta-data get bk_token)"

        cd terraform
        terraform apply -auto-approve tf.plan
    agents:
      queue: "default"