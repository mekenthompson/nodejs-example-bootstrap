# .buildkite/bootstrap.yml

steps:
  #───────────────────────────────────────────────────────────────────────────────
  # 1. Prompt for infra config
  #───────────────────────────────────────────────────────────────────────────────
  - block: ":rocket: Deploy Buildkite infrastructure"
    fields:
      - text: "Buildkite org slug"                     # prompt text
        key: org_slug                                  # metadata key
        required: true
        default: "bootstrap-example"
        hint: "Find it in your URL: buildkite.com/<org-slug>"
      - text: "Registry name"
        key: registry
        required: true
        default: "bootstrap-example"
        hint: "Must be unique"
      - select: "Hosted agent shape"
        key: shape
        required: true
        default: "LINUX_AMD64_2X4"
        options:
          - label: "2 vCPU / 4 GB Linux"
            value: "LINUX_AMD64_2X4"
          - label: "4 vCPU / 16 GB Linux"
            value: "LINUX_AMD64_4X16"
          - label: "macOS M1 4 vCPU / 12 GB"
            value: "MACOS_M1_4X12"
      - password: "Buildkite API token"
        key: bk_token
        required: true
        hint: "Scopes: write_pipelines, read_pipelines, write_orgs, write_clusters, write_suites"

  #───────────────────────────────────────────────────────────────────────────────
  # 2. Terraform — Init & Plan
  #───────────────────────────────────────────────────────────────────────────────
  - label: ":terraform: Initialize & Plan"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          # mount your repo at /workdir; cd into /workdir/terraform
          workdir: "/workdir/terraform"
          mount_buildkite_agent: true
          # run your commands via sh, not terraform’s ENTRYPOINT
          shell: [ "sh", "-eo", "pipefail", "-c" ]
          env:
            TF_VAR_org_slug:            "${BUILDKITE_META_ORG_SLUG}"
            TF_VAR_registry_name:       "${BUILDKITE_META_REGISTRY}"
            TF_VAR_queue_shape:         "${BUILDKITE_META_SHAPE}"
            TF_VAR_buildkite_api_token: "${BUILDKITE_META_BK_TOKEN}"
    artifact_paths:
      - "artifacts/terraform.tfplan"
    command:
      - |
        # Create artifacts directory
        mkdir -p artifacts

        echo "--- :terraform: Initializing Terraform"
        terraform init -input=false

        echo "--- :terraform: Planning infra changes"
        terraform plan -out=artifacts/terraform.tfplan

        echo "--- :mag: Showing planned changes"
        terraform show -no-color artifacts/terraform.tfplan

  #───────────────────────────────────────────────────────────────────────────────
  # 3. Pause for manual approval
  #───────────────────────────────────────────────────────────────────────────────
  - wait
  - block: ":white_check_mark: Apply infrastructure changes?"

  #───────────────────────────────────────────────────────────────────────────────
  # 4. Terraform — Apply
  #───────────────────────────────────────────────────────────────────────────────
  - label: ":terraform: Apply"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          workdir: "/workdir/terraform"
          mount_buildkite_agent: true
          shell: [ "sh", "-eo", "pipefail", "-c" ]
          env:
            TF_VAR_org_slug:            "${BUILDKITE_META_ORG_SLUG}"
            TF_VAR_registry_name:       "${BUILDKITE_META_REGISTRY}"
            TF_VAR_queue_shape:         "${BUILDKITE_META_SHAPE}"
            TF_VAR_buildkite_api_token: "${BUILDKITE_META_BK_TOKEN}"
    artifact_paths:
      - "artifacts/terraform-outputs.json"
    command:
      - |
        # Ensure artifacts directory exists
        mkdir -p artifacts

        echo "--- :terraform: Applying infra changes"
        terraform apply -auto-approve artifacts/terraform.tfplan

        echo "--- :floppy_disk: Saving outputs"
        terraform output -json > artifacts/terraform-outputs.json

        echo "--- :information_source: Exporting meta-data"
        buildkite-agent meta-data set QUEUE_KEY default
        buildkite-agent meta-data set REGISTRY_SLUG "${TF_VAR_registry_name}"

  #───────────────────────────────────────────────────────────────────────────────
  # 5. Trigger the nodejs-example pipeline
  #───────────────────────────────────────────────────────────────────────────────
  - label: ":tada: Trigger nodejs-example pipeline"
    command:
      - |
        echo "--- :rocket: Triggering nodejs-example"
        ORG_SLUG=$(buildkite-agent meta-data get org_slug)
        REGISTRY=$(buildkite-agent meta-data get REGISTRY_SLUG)

        buildkite-agent pipeline upload <<PIPELINE
        steps:
          - trigger: "nodejs-example"
            async: true
            build:
              message: "First build after bootstrap :rocket:"
              env:
                QUEUE_KEY: "default"
                REGISTRY_SLUG: "$REGISTRY"
        PIPELINE

  #───────────────────────────────────────────────────────────────────────────────
  # 6. Cleanup
  #───────────────────────────────────────────────────────────────────────────────
  - wait
  - label: ":broom: Cleanup"
    command:
      - |
        echo "--- :broom: Cleaning up artifacts"
        rm -rf artifacts/
        echo "--- :white_check_mark: Bootstrap complete!"
