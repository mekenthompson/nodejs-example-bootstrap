steps:
  # ──────────────────────────────────────────────
  # 1. Interactive form
  # ──────────────────────────────────────────────
  - block: "Configure your Buildkite org"
    prompt: |
      1. Creates a hosted‑agent queue, Package Registry and sample pipeline
      2. Runs Terraform **plan** → approval → **apply**
      3. Finishes with a green Node.js build on your new queue

      *Fill in the details and click **Unblock** to continue.*
    key: "config"
    fields:
      - text: "Buildkite organisation slug"
        key: "org_slug"
        required: true

      - text: "Package Registry name"
        key: "registry"
        default: "acme-internal"
        required: true

      - select: "Hosted‑agent instance shape"
        key: "shape"
        options:
          - label: "2 vCPU / 4 GB Linux (LINUX_AMD64_2X4)"
            value: "LINUX_AMD64_2X4"
          - label: "4 vCPU / 8 GB Linux (LINUX_AMD64_4X8)"
            value: "LINUX_AMD64_4X8"
          - label: "Apple M2 Pro 32 GB macOS (MAC_M2PRO_32GB)"
            value: "MAC_M2PRO_32GB"

      - password: "Buildkite org‑level API token (write scope)"
        key: "bk_token"
        required: true
        hint: "Create one at https://buildkite.com/user/api-access-tokens"

  # ──────────────────────────────────────────────
  # 2. terraform init & plan
  # ──────────────────────────────────────────────
  - label: ":terraform: init & plan"
    key: plan
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          entrypoint: ""               # clear default ENTRYPOINT ["terraform"]
          workdir: /workdir
    commands:
      - |
        set -euo pipefail

        # Ensure curl exists (needed for GraphQL calls)
        if ! command -v curl >/dev/null 2>&1; then
          if command -v apk >/dev/null 2>&1; then
            apk add --no-cache curl
          else
            apt-get update -qq && apt-get install -y -qq curl
          fi
        fi

        export TF_VAR_org_slug="$(buildkite-agent meta-data get org_slug)"
        export TF_VAR_registry_name="$(buildkite-agent meta-data get registry)"
        export TF_VAR_queue_shape="$(buildkite-agent meta-data get shape)"
        export TF_VAR_buildkite_api_token="$(buildkite-agent meta-data get bk_token)"

        cd terraform
        terraform init -input=false
        terraform plan -out=tf.plan
    agents:
      queue: "default"

  - wait

  # ──────────────────────────────────────────────
  # 3. manual approval
  # ──────────────────────────────────────────────
  - block: "Apply the Terraform plan?"

  # ──────────────────────────────────────────────
  # 4. terraform apply
  # ──────────────────────────────────────────────
  - label: ":rocket: terraform apply"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          entrypoint: ""
          workdir: /workdir
    commands:
      - |
        set -euo pipefail

        if ! command -v curl >/dev/null 2>&1; then
          if command -v apk >/dev/null 2>&1; then
            apk add --no-cache curl
          else
            apt-get update -qq && apt-get install -y -qq curl
          fi
        fi

        export TF_VAR_org_slug="$(buildkite-agent meta-data get org_slug)"
        export TF_VAR_registry_name="$(buildkite-agent meta-data get registry)"
        export TF_VAR_queue_shape="$(buildkite-agent meta-data get shape)"
        export TF_VAR_buildkite_api_token="$(buildkite-agent meta-data get bk_token)"

        cd terraform
        terraform apply -auto-approve tf.plan
    agents:
      queue: "default"