# Buildkite Bootstrap Pipeline
# Description: Sets up Buildkite infra (cluster, registry, pipelines, OIDC auth)
#              using Terraform, then bootstraps a nodejs-example pipeline.

steps:
  ########################################################
  # Description: Prompt for organization- and registry-specific
  #              parameters before deploying infra.
  - block: ":rocket: Deploy Buildkite infrastructure?"
    fields:
      - text: "Buildkite org slug"
        key: "org_slug"
        required: true
        default: "bootstrap-example"
        hint: "Find it in your URL: buildkite.com/<org-slug>"
      - text: "Registry name"
        key: "registry"
        required: true
        default: "bootstrap-example"
        hint: "Must be unique"
      - select: "Hosted agent shape"
        key: "shape"
        required: true
        default: "LINUX_AMD64_2X4"
        options:
          - label: "Linux AMD64 2x4"
            value: "LINUX_AMD64_2X4"
          - label: "Linux AMD64 4x16"
            value: "LINUX_AMD64_4X16"
          - label: "macOS M1 4x12"
            value: "MACOS_M1_4X12"
      - text: "Buildkite API token"
        key: "bk_token"
        required: true
        hint: "write_pipelines, read_pipelines, write_orgs, write_clusters, write_suites"

  ########################################################
  # Description: Run Terraform init & plan inside a Docker
  #              container, outputting a tfplan artifact.
  - label: ":terraform: Initialize & Plan"
    key: "terraform-plan"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          workdir: /workdir
          mount_buildkite_agent: true
          entrypoint: ""    # disable the terraform entrypoint
          command:
            - sh
            - -eo
            - pipefail
            - -c
            - |
              mkdir -p artifacts

              echo "--- :debug: Host working directory"
              pwd
              ls -al
              ls -al terraform || true

              echo "--- :package: Installing dependencies"
              apk add --no-cache curl jq

              echo "--- :terraform: Initializing Terraform"
              terraform -chdir=./terraform init -input=false

              echo "--- :terraform: Planning infrastructure changes"
              terraform -chdir=./terraform plan \
                -input=false \
                -out=/workdir/artifacts/terraform.tfplan

              echo "--- :mag: Showing planned changes"
              terraform -chdir=./terraform show \
                -no-color /workdir/artifacts/terraform.tfplan
    env:
      TF_VAR_org_slug: "${BUILDKITE_META_ORG_SLUG}"
      TF_VAR_registry_name: "${BUILDKITE_META_REGISTRY}"
      TF_VAR_queue_shape:  "${BUILDKITE_META_SHAPE}"
      TF_VAR_buildkite_api_token: "${BUILDKITE_META_BK_TOKEN}"
    artifact_paths:
      - "artifacts/terraform.tfplan"

  - wait

  ########################################################
  # Description: Confirm before applying the planned changes.
  - block: ":rocket: Apply infrastructure changes?"
    key: "apply-block"
    depends_on: "terraform-plan"

  ########################################################
  # Description: Apply the Terraform plan in Docker and
  #              save the JSON outputs as an artifact.
  - label: ":terraform: Apply"
    key: "terraform-apply"
    depends_on: "apply-block"
    plugins:
      - docker#v3.8.0:
          image: hashicorp/terraform:1.5.7
          workdir: /workdir
          mount_buildkite_agent: true
          entrypoint: ""
          command:
            - sh
            - -eo
            - pipefail
            - -c
            - |
              buildkite-agent artifact download "artifacts/terraform.tfplan" .

              echo "--- :debug: Host working directory"
              pwd
              ls -al
              ls -al terraform || true

              echo "--- :package: Installing dependencies"
              apk add --no-cache curl jq

              echo "--- :terraform: Initializing Terraform"
              terraform -chdir=./terraform init -input=false

              echo "--- :terraform: Applying infrastructure changes"
              terraform -chdir=./terraform apply \
                -input=false \
                -auto-approve \
                /workdir/artifacts/terraform.tfplan

              echo "--- :white_check_mark: Infrastructure deployed successfully!"
              echo "--- :floppy_disk: Saving outputs"
              terraform -chdir=./terraform output -json \
                > /workdir/artifacts/terraform-outputs.json
    env:
      TF_VAR_org_slug: "${BUILDKITE_META_ORG_SLUG}"
      TF_VAR_registry_name: "${BUILDKITE_META_REGISTRY}"
      TF_VAR_queue_shape:  "${BUILDKITE_META_SHAPE}"
      TF_VAR_buildkite_api_token: "${BUILDKITE_META_BK_TOKEN}"
    artifact_paths:
      - "artifacts/terraform-outputs.json"

  - wait

  ########################################################
  # Description: Trigger the first build of the newly
  #              created nodejs-example pipeline.
  - label: ":tada: Trigger nodejs-example pipeline"
    key: "trigger-pipeline"
    depends_on: "terraform-apply"
    command: |
      echo "--- :rocket: Triggering the newly created pipeline"
      ORG_SLUG=$(buildkite-agent meta-data get org_slug)
      cat <<YAML | buildkite-agent pipeline upload
      steps:
        - trigger: "nodejs-example"
          label: ":nodejs: First build of nodejs-example"
          async: true
          build:
            message: "First build after bootstrap :rocket:"
            branch: "main"
      YAML
      echo "--- :link: Pipeline triggered successfully!"
      echo "Visit: https://buildkite.com/${ORG_SLUG}/nodejs-example"

  - wait: ~
    continue_on_failure: true

  ########################################################
  # Description: Clean up temporary artifacts and display
  #              next steps to the user.
  - label: ":broom: Cleanup"
    key: "cleanup"
    command: |
      echo "--- :broom: Cleaning up artifacts"
      rm -rf artifacts/
      echo "--- :white_check_mark: Bootstrap complete!"
      echo ""
      echo "Resources created:"
      echo "- Buildkite cluster with hosted agents"
      echo "- Private package registry"
      echo "- nodejs-example pipeline"
      echo "- Test analytics configuration"
      echo ""
      echo "Next steps:"
      echo "1. Check the nodejs-example pipeline build"
      echo "2. Review the created resources in your Buildkite settings"
      echo "3. Start pushing code to trigger builds!"
